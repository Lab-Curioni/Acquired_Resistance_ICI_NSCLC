import glob, sys, collections, os, time, argparse

parser = argparse.ArgumentParser(description='Summing up a bunch of annovar files written by the AnnovarAnalyzer.py. Written by Hans-Joachim Ruscheweyh, Jan 20, 2016')
parser.add_argument('-i', '--infolder', help='Folder with the annovar files generated by the Annovaranalyzer', required=True)
parser.add_argument('-o', '--outfolder', help='Output folder. Will be created if not existant', required=True)
args = parser.parse_args()

infolder = args.infolder
outdir = args.outfolder
if not os.path.exists(outdir):
    os.makedirs(outdir)
infiles = glob.glob(infolder + '/*_geneList.txt')
filegroups = {}
for file in infiles:
    group = file.replace('_geneList.txt','').split('_')[-1]
    if group not in filegroups:
        filegroups[group] = []
    filegroups[group].append(file)

for group, files in filegroups.iteritems():
    sortedlist = sorted(files)
    pos = 0
    all = {}
    counter = collections.Counter()
    for file in sortedlist:
        openf = open(file, 'rU')
        for line in openf:
            if line.startswith('#'):
                continue
            count = int(line.split('\t')[1].strip())
            ensemblId = line.split('\t')[0].strip()
            if ensemblId not in all:
                all[ensemblId] = [0]*len(files)
            all[ensemblId][pos] = count
            if count > 0:
                counter[ensemblId] += 1
        pos = pos + 1
    outtablefile = open(outdir + '/Table_pval_gt_' + group + '.txt', 'w')
    outtablefile.write('#Mapping for all samples counting which gene has been mutated n times. The order is determined by the histo_count. The 2 last columns give the sum of how often a gene has been mutated overall and the histoscore.')
    outtablefile.write('#Generated by GeneListAnalyzer on '+time.strftime("%c")+ ', from pval > ' + group + ' and files in directory: ' + os.path.realpath(infolder))
    outtablefile.write('Gene')
    for file in sortedlist:
        fname = os.path.basename(file).split('.annovar')[0]
        outtablefile.write('\t' + fname)
    outtablefile.write('\t' + 'sum')
    outtablefile.write('\t' + 'histo')
    outtablefile.write('\n')

    outhistofile = open(outdir + '/Histogram_pval_gt_' + group + '.txt', 'w')
    outhistofile.write('#Mapping of each gene to the number of other files of the same pval where this gene has been found. This are not real gene counts but only the number of appearances.\n')
    outhistofile.write('#Generated by GeneListAnalyzer on '+time.strftime("%c")+ ', from pval > ' + group + ' and files in directory: ' + os.path.realpath(infolder))
    outhistofile.write('#Max number of occurences: ' + str(len(files)) + '\n')
    for (ensid, count) in counter.most_common():
        outhistofile.write(ensid + '\t' + str(count) + '\n')
        outtablefile.write(ensid)
        for c in all[ensid]:
            outtablefile.write('\t' + str(c))
        outtablefile.write('\t' + str(sum(all[ensid])))
        outtablefile.write('\t' + str(count))
        outtablefile.write('\n')
    outhistofile.close()
    outtablefile.close()
