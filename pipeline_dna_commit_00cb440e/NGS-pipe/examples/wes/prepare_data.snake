OUTDIR = ''

f = open('SRP051153_run_info.txt', 'r')
NAMES = []
f.readline()
for line in f:
    NAMES.append(line.strip().split("\t")[5])
f.close()

f = open('SRP051153_run_info.txt', 'r')
SRR2SAMPLE = {}
f.readline()
for line in f:
    SRR2SAMPLE[line.strip().split()[5]] = (line.strip().split()[2])
f.close()

def finalFastqNames():
    out = []
    for srr, sample in SRR2SAMPLE.items():
        out.append('sra/' + sample + '/PAIREDEND/' + srr + '_R1.fastq.gz')
        out.append('sra/' + sample + '/PAIREDEND/' + srr + '_R2.fastq.gz')
    return out
FINALFASTQNAMES = finalFastqNames()

def finalTSVNames():
    out = []
    for srr, sample in SRR2SAMPLE.items():
        out.append('sra/' + sample + '/PAIREDEND/' + srr + '.tsv')
    return out
FINALTSVNAMES = finalTSVNames()

rule all:
    input: 
        expand(OUTDIR + 'sra/{id}.sra', id = NAMES),
        expand(OUTDIR + 'sra/{id}/PAIREDEND/{id}_1.fastq.gz', id = NAMES),
        expand(OUTDIR + 'sra/{id}/PAIREDEND/{id}_2.fastq.gz', id = NAMES),
        expand(OUTDIR + '{file}', file = FINALFASTQNAMES),
        expand(OUTDIR + '{file}', file = FINALTSVNAMES),
        '../resources/ucsc.hg19.fasta',
        '../resources/ucsc.hg19.fasta.fai',
        '../resources/ucsc.hg19.dict',
        '../resources/ucsc.hg19.fasta.amb',
        '../resources/nexterarapidcapture_expandedexome_targetedregions.bed',
        '../resources/TruSeq2-PE.fa'

def getShortId(wildcards):
    return wildcards.id[0:6]

rule download:
    output: temp(OUTDIR + 'sra/{id}.sra')
    params: 
        shortId = getShortId,
        lsfoutfile = OUTDIR + 'sra/{id}.sra.out',
        lsferrfile = OUTDIR + 'sra/{id}.sra.err',
        scratch = '10000',
        mem = '10000',
        time = '600'
    shell: 'wget ftp://ftp-trace.ncbi.nih.gov/sra/sra-instant/reads/ByRun/sra/SRR/{params.shortId}/{wildcards.id}/{wildcards.id}.sra -O sra/{wildcards.id}.sra'

rule createFastqDump:
    output:
        aligner = '../tools/sratoolkit.2.8.2-ubuntu64/bin/fastq-dump'
    params:
        place =  '../tools/',
        lsfoutfile = '../tools/sratoolkit.2.8.2-ubuntu64/bin/fastq-dump.lsfout.log',
        lsferrfile = '../tools/sratoolkit.2.8.2-ubuntu64/bin/fastq-dump.lsferr.log',
        scratch = '10000',
        mem = '10000',
        time = '20',
    shell:
        ('cd {params.place}; ' +
        'wget https://ftp-trace.ncbi.nlm.nih.gov/sra/sdk/current/sratoolkit.current-ubuntu64.tar.gz; '
        'tar -xvf sratoolkit.current-ubuntu64.tar.gz; ')

rule fastqDump:
    input: 
        sra = OUTDIR + 'sra/{id}.sra'
    output: 
        R1 = OUTDIR + 'sra/{id}/PAIREDEND/{id}_1.fastq.gz',
        R2 = OUTDIR + 'sra/{id}/PAIREDEND/{id}_2.fastq.gz',
    params: 
        outDir = OUTDIR + 'sra/{id}/PAIREDEND/',
        lsfoutfile = OUTDIR + 'sra/{id}/PAIREDEND/{id}.fastq.out',
        lsferrfile = OUTDIR + 'sra/{id}/PAIREDEND/{id}.fastq.err',
        scratch = '10000',
        mem = '10000',
        time = '600',
    shell:
        'fastq-dump --split-3 --gzip --outdir {params.outDir} {input.sra}'

localrules: linkFastqs
rule linkFastqs:
    input:
        fastq = OUTDIR + 'sra/{srr}/PAIREDEND/{srr}_{mate}.fastq.gz'
    output:
        fastq = OUTDIR + 'sra/{sample}/PAIREDEND/{srr}_R{mate}.fastq.gz'
    params:
        outdir = OUTDIR + 'sra/{sample}/PAIREDEND/'
    shell:
        'cd {params.outdir}; ln -s ../../{wildcards.srr}/PAIREDEND/{wildcards.srr}_{wildcards.mate}.fastq.gz {wildcards.srr}_R{wildcards.mate}.fastq.gz; touch -h {wildcards.srr}_R{wildcards.mate}.fastq.gz'

localrules: createTSVs
rule createTSVs:
    input:
        fastq = OUTDIR + 'sra/{srr}/PAIREDEND/{srr}_1.fastq.gz'
    output:
        fastq = OUTDIR + 'sra/{sample}/PAIREDEND/{srr}.tsv'
    run:
        f = open(output.fastq, 'w')
        f.write("RUN_NAME_FOLDER\t" + wildcards.sample + "\n")
        f.write("LANE_NUMBER\t" + wildcards.sample + "\n")
        f.write("SAMPLE_CODE\t" + wildcards.sample + "\n")
        f.write("SAMPLE_TYPE\tILLUMINA\n")
        f.close()

rule downloadReference:
    output:
        fa = '../resources/ucsc.hg19.fasta',
        fai = '../resources/ucsc.hg19.fasta.fai',
        dict = '../resources/ucsc.hg19.dict'
    params:
        lsfoutfile = '../resources/ucsc.fasta.hg19.lsfout.log',
        lsferrfile = '../resources/ucsc.fasta.hg19.lsferr.log',
        scratch = '10000',
        mem = '10000',
        time = '60',
    shell:
        ('mkdir -p ../resources; cd ../resources; ' +
        'wget ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/hg19/ucsc.hg19.fasta.gz; gunzip ucsc.hg19.fasta.gz; ' +
        'wget ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/hg19/ucsc.hg19.fasta.fai.gz; gunzip ucsc.hg19.fasta.fai.gz; ' +
        'wget ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/hg19/ucsc.hg19.dict.gz; gunzip ucsc.hg19.dict.gz;')

rule downloadRegions:
    output:
        '../resources/nexterarapidcapture_expandedexome_targetedregions.bed',
    params:
        lsfoutfile = '../resources/nexterarapidcapture_expandedexome_targetedregions.bed.lsfout.log',
        lsferrfile = '../resources/nexterarapidcapture_expandedexome_targetedregions.bed.lsferr.log',
        scratch = '10000',
        mem = '10000',
        time = '60',
    shell:
        ('mkdir -p ../resources; cd ../resources; ' +
        'wget http://support.illumina.com/content/dam/illumina-support/documents/documentation/chemistry_documentation/samplepreps_nextera/nexterarapidcapture/nexterarapidcapture_expandedexome_targetedregions.bed')


rule createBwaIndex:
    input:
        ref = '../resources/ucsc.hg19.fasta'
    output:
        index1 = '../resources/ucsc.hg19.fasta.amb',
        index2 = '../resources/ucsc.hg19.fasta.ann',
        index3 = '../resources/ucsc.hg19.fasta.bwt',
        index4 = '../resources/ucsc.hg19.fasta.pac',
        index5 = '../resources/ucsc.hg19.fasta.sa'
    params:
        lsfoutfile = '../resources/ucsc.hg19.fasta.bwa.lsfout.log',
        lsferrfile = '../resources/ucsc.hg19.fasta.bwa.lsferr.log',
        scratch = '10000',
        mem = '10000',
        time = '240',
        index = '../resources/ucsc.hg19.fasta'
    benchmark:
        '../resources/ucsc.hg19.fasta.bwa.benchmark'
    shell:
        'bwa index {input.ref}'
rule downloadAdapters:
    output:
        pe = '../resources/TruSeq2-PE.fa'
    params:
        lsfoutfile = '../resources/adapters.lsfout.log',
        lsferrfile = '../resources/adapters.lsferr.log',
        scratch = '2000',
        mem = '2000',
        time = '20',
    shell:
         ('mkdir -p ../resources; cd ../resources; ' +
         'wget https://github.com/timflutre/trimmomatic/blob/master/adapters/TruSeq2-PE.fa')
