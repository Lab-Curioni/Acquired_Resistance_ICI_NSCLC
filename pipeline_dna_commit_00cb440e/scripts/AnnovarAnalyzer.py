import sys, os, gzip, collections, time, argparse

#Calculated from
#-10*log(1-p_somatic)
#0.5 = pval 0.5
#'0.0': 0.0, '0.1': 0.46, '0.2': 0.97, '0.3': 1.54, '0.4': 2.22,
pvals = {'0.5': 3.01, '0.6': 3.97, '0.7': 5.23, '0.8': 6.99, '0.9': 10.0, '0.99': 20.0, '0.99': 30.0, '0.999': 40.0, '0.9999': 50, '0.99999': 60.0}


parser = argparse.ArgumentParser(description='Filter Annovar output by pvalues and exonic/splicing regions. Written by Hans-Joachim Ruscheweyh, Jan 20, 2016')
parser.add_argument('-i', '--infile', help='Annovar input file. Either uncompressed or gzipped', required=True)
parser.add_argument('-o', '--outfolder', help='Folder where output files will be stored. Will be created if not existant', required=True)
args = parser.parse_args()
#params
annovarIn = args.infile
outdir = args.outfolder
#input
annovarFile = ''
if annovarIn.endswith('.gz'):
    annovarFile = gzip.open(annovarIn, 'rU')
else:
    annovarFile = open(annovarIn, 'rU')

#output
annovarOutfiles = {}
geneListOutfiles = {}
geneListCounters = {}
if not os.path.exists(outdir):
    os.makedirs(outdir)
outfilepattern = outdir + '/' + os.path.splitext(os.path.basename(annovarIn))[0]
for pval in pvals:
    annovarOutfiles[pval] = gzip.open(outfilepattern + '_pval_gt_' + pval + '_annovar.txt.gz', 'w')
    geneListOutfiles[pval] = open(outfilepattern + '_pval_gt_' + pval + '_geneList.txt', 'w')
    geneListCounters[pval] = collections.Counter()

#iterate
for line in annovarFile:
    if line.startswith('Chr'): #header
        for pval, file in annovarOutfiles.iteritems():
            file.write(line.strip() + '\n')
        continue
    splits = line.split('\t')
    score = float(splits[len(splits)-2])
    functensgene = splits[5].strip()
    geneid = splits[6].strip().replace(',',';')
    uniquegeneids = set()

    for geneid2 in geneid.split(';'):
        uniquegeneids.add(geneid2)
    mutationtype = splits[8].strip()
    candidate = False
    if functensgene == 'exonic' or functensgene == 'exonic;splicing':
        if mutationtype != 'synonymous SNV':
            candidate = True
    if functensgene == 'splicing':
        candidate = True
    if candidate:
        for pvalname, pval in pvals.iteritems():
            if score >= pval:
                annovarOutfiles[pvalname].write(line.strip() + '\n')
                for geneid2 in uniquegeneids:
                    geneListCounters[pvalname][geneid2] += 1

annovarFile.close()
for pval, file in annovarOutfiles.iteritems():
    file.close()
for pval, file in geneListOutfiles.iteritems():
    file.write('#Generated by AnnovarAnalyzer.py on ' + time.strftime("%c") + ' from the file: ' + os.path.realpath(annovarIn) + ' for a p-value: ' + str(pval) + '\n')
    counter = geneListCounters[pval].most_common()
    for (val, count) in counter:
        file.write(val + '\t' + str(count) + '\n')
    file.close()
